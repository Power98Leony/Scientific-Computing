# -*- coding: utf-8 -*-
"""AOL SCICOMP LEONY

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TZE2Cy1qBqCHVF98J6Kx-bQ6aoYkZy7q

# POLYNOMIAL REGRESSION DEGREE 2
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Define the data
month_numbers = np.arange(1, 145)  # month numbers (1 to 144)
production_values = [
    1863, 1614, 2570, 1685, 2101, 1811, 2457, 2171, 2134, 2502, 2358, 2399, 2048, 2523,
    2086, 2391, 2150, 2340, 3129, 2277, 2964, 2997, 2747, 2862, 3405, 2677, 2749, 2755,
    2963, 3161, 3623, 2768, 3141, 3439, 3601, 3531, 3477, 3376, 4027, 3175, 3274, 3334,
    3964, 3649, 3502, 3688, 3657, 4422, 4197, 4441, 4736, 4521, 4485, 4644, 5036, 4876,
    4789, 4544, 4975, 5211, 4880, 4933, 5079, 5339, 5232, 5520, 5714, 5260, 6110, 5334,
    5988, 6235, 6365, 6266, 6345, 6118, 6497, 6278, 6638, 6590, 6271, 7246, 6584, 6594,
    7092, 7326, 7409, 7976, 7959, 8012, 8195, 8008, 8313, 7791, 8368, 8933, 8756, 8613,
    8705, 9098, 8769, 9544, 9050, 9186, 10012, 9685, 9966, 10048, 10244, 10740, 10318,
    10393, 10986, 10635, 10731, 11749, 11849, 12123, 12274, 11666, 11960, 12629, 12915,
    13051, 13387, 13309, 13732, 13162, 13644, 13808, 14101, 13992, 15191, 15018, 14917,
    15046, 15556, 15893, 16388, 16782, 16716, 17033, 16896, 17689
]

# Define the polynomial function of order 2
def poly_func(x, a, b, c):
    return a * x**2 + b * x + c

try:
    # Curve fitting using polynomial function of order 2
    params, _ = optimize.curve_fit(poly_func, xdata=month_numbers, ydata=production_values)

    # Extract params
    a, b, c = params
    print(f'Polynomial degree 2 parameters: a = {a:.3f}, b = {b:.3f}, c = {c:.3f}')

    # Display the polynomial equation
    print(f"Polynomial degree 2 approximation = {a:.3f} * x^2 + {b:.3f} * x + {c:.3f}")

    # Calculate predicted values using the optimized parameters
    predicted_y = poly_func(month_numbers, *params)

    # Calculate Mean Absolute Error (MAE)
    mae = mean_absolute_error(production_values, predicted_y)
    print(f"Mean Absolute Error (MAE): {mae:.3f}")

    # Calculate Root Mean Squared Error (RMSE)
    rmse = np.sqrt(mean_squared_error(production_values, predicted_y))
    print(f"Root Mean Squared Error (RMSE): {rmse:.3f}")

    # Calculate Mean Absolute Percentage Error (MAPE)
    mape = np.mean(np.abs((production_values - predicted_y) / production_values)) * 100
    print(f"Mean Absolute Percentage Error (MAPE): {mape:.3f}%")

    # Plot the data and the polynomial regression line
    plt.figure(figsize=(10, 6))
    plt.scatter(month_numbers, production_values, color='blue', label='Data')
    plt.plot(month_numbers, predicted_y, color='red', label='Polynomial Regression Order 2')
    plt.xlabel('Month')
    plt.ylabel('Production')
    plt.title('Production Trend Approximation (Polynomial Degree 2)')
    plt.legend()
    plt.show()

except RuntimeError:
    print("Optimization failed. Check data and initial parameters.")

"""## POLYNOMIAL REGRESSION DEGREE 3"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Define the data
month_numbers = np.arange(1, 145)  # month numbers (1 to 144)
production_values = [
    1863, 1614, 2570, 1685, 2101, 1811, 2457, 2171, 2134, 2502, 2358, 2399, 2048, 2523,
    2086, 2391, 2150, 2340, 3129, 2277, 2964, 2997, 2747, 2862, 3405, 2677, 2749, 2755,
    2963, 3161, 3623, 2768, 3141, 3439, 3601, 3531, 3477, 3376, 4027, 3175, 3274, 3334,
    3964, 3649, 3502, 3688, 3657, 4422, 4197, 4441, 4736, 4521, 4485, 4644, 5036, 4876,
    4789, 4544, 4975, 5211, 4880, 4933, 5079, 5339, 5232, 5520, 5714, 5260, 6110, 5334,
    5988, 6235, 6365, 6266, 6345, 6118, 6497, 6278, 6638, 6590, 6271, 7246, 6584, 6594,
    7092, 7326, 7409, 7976, 7959, 8012, 8195, 8008, 8313, 7791, 8368, 8933, 8756, 8613,
    8705, 9098, 8769, 9544, 9050, 9186, 10012, 9685, 9966, 10048, 10244, 10740, 10318,
    10393, 10986, 10635, 10731, 11749, 11849, 12123, 12274, 11666, 11960, 12629, 12915,
    13051, 13387, 13309, 13732, 13162, 13644, 13808, 14101, 13992, 15191, 15018, 14917,
    15046, 15556, 15893, 16388, 16782, 16716, 17033, 16896, 17689
]

# Define the polynomial function
def poly_func(x, a, b, c, d):
    return a * x**3 + b * x**2 + c * x + d

try:
    # Curve fitting using polynomial function
    params, _ = optimize.curve_fit(poly_func, xdata=month_numbers, ydata=production_values)

    # Extract parameters
    a, b, c, d = params
    print(f'Polynomial degree 3 parameters: a = {a:.3f}, b = {b:.3f}, c = {c:.3f}, d = {d:.3f}')

    # Print the polynomial equation
    print(f"Polynomial degree 3 approximation = {a:.3f} * x^3 + {b:.3f} * x^2 + {c:.3f} * x + {d:.3f}")

    # Calculate predicted values using the optimized parameters
    predicted_y = poly_func(month_numbers, *params)

    # Calculate Mean Absolute Error (MAE)
    mae = mean_absolute_error(production_values, predicted_y)
    print(f"Mean Absolute Error (MAE): {mae: .3f}")

    # Calculate Root Mean Squared Error (RMSE)
    rmse = np.sqrt(mean_squared_error(production_values, predicted_y))
    print(f"Root Mean Squared Error (RMSE): {rmse: .3f}")

    # Calculate errors Mean Absolute Percentage Error (MAPE)
    relative_error3 = np.mean(np.abs((production_values - predicted_y) / production_values)) * 100
    print(f"Mean Absolute Percentage Error (MAPE): {relative_error3:.3f}%")

    # Calculate predicted values using the optimized parameters
    predicted_y = poly_func(month_numbers, *params)

    # Plot the data and the polynomial regression line
    plt.figure(figsize=(10, 6))
    plt.scatter(month_numbers, production_values, color='blue', label='Data')
    plt.plot(month_numbers, predicted_y, color='red', label='Polynomial Regression Order 3')
    plt.xlabel('Month')
    plt.ylabel('Production')
    plt.title('Production Trend Approximation (Polynomial Degree 3)')
    plt.legend()
    plt.show()

except RuntimeError:
    print("Optimization failed. Check data and initial parameters.")

"""# EXPONENTIAL REGRESSION(Method That I Choose)"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Data input
month_numbers = np.arange(1, 145)  # month numbers (1 to 144)
production_values = [
    1863, 1614, 2570, 1685, 2101, 1811, 2457, 2171, 2134, 2502, 2358, 2399, 2048, 2523,
    2086, 2391, 2150, 2340, 3129, 2277, 2964, 2997, 2747, 2862, 3405, 2677, 2749, 2755,
    2963, 3161, 3623, 2768, 3141, 3439, 3601, 3531, 3477, 3376, 4027, 3175, 3274, 3334,
    3964, 3649, 3502, 3688, 3657, 4422, 4197, 4441, 4736, 4521, 4485, 4644, 5036, 4876,
    4789, 4544, 4975, 5211, 4880, 4933, 5079, 5339, 5232, 5520, 5714, 5260, 6110, 5334,
    5988, 6235, 6365, 6266, 6345, 6118, 6497, 6278, 6638, 6590, 6271, 7246, 6584, 6594,
    7092, 7326, 7409, 7976, 7959, 8012, 8195, 8008, 8313, 7791, 8368, 8933, 8756, 8613,
    8705, 9098, 8769, 9544, 9050, 9186, 10012, 9685, 9966, 10048, 10244, 10740, 10318,
    10393, 10986, 10635, 10731, 11749, 11849, 12123, 12274, 11666, 11960, 12629, 12915,
    13051, 13387, 13309, 13732, 13162, 13644, 13808, 14101, 13992, 15191, 15018, 14917,
    15046, 15556, 15893, 16388, 16782, 16716, 17033, 16896, 17689
]

# Define the exponential function
def exp_func(x, a, b, c):
    return a * np.exp(b * x) + c

# Fit the exponential function to the data
params, _ = curve_fit(exp_func, month_numbers, production_values, p0=(1, 0.01, 1))
a, b, c = params
print(f'Exponential function parameters: a={a: .3f}, b={b: .3f}, c={c: .3f}')

# Display the mathematical model
print(f"Exponential approximation = {a:.3f} * e^({b:.3f} * x) + {c:.3f}")

# Generate the fitted values
fitted_values = exp_func(month_numbers, *params)


# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(production_values, fitted_values)
print(f"Mean Absolute Error (MAE): {mae: .3f}")


# Calculate Root Mean Squared Error (RMSE)
rmse = np.sqrt(mean_squared_error(production_values, fitted_values))
print(f"Root Mean Squared Error (RMSE): {rmse: .3f}")

# Predicted values
predicted_exp = exp_func(month_numbers, *params)

# Calculate errors Mean Absolute Percentage Error (MAPE)
relative_error_exp = np.mean(np.abs((production_values - predicted_exp) / production_values)) * 100

print(f"Exponential Fit MAPE: {relative_error_exp:.3f}%")


# Plot the original data and the fitted exponential function
plt.figure(figsize=(10, 6))
plt.scatter(month_numbers, production_values, color='blue', label='Data')
plt.plot(month_numbers, fitted_values, color='red', label='Exponential Fit')
plt.xlabel('Month')
plt.ylabel('Production')
plt.title('Production Trend Approximation (Exponential Fit)')
plt.legend()
plt.show()

"""### Capacity Reaches 25,000 and Plans to Build A New Warehouse (Newton-Raphson Method)"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Data input
month_numbers = np.arange(1, 145)  # bulan 1 hingga 144
production_values = [
    1863, 1614, 2570, 1685, 2101, 1811, 2457, 2171, 2134, 2502, 2358, 2399, 2048, 2523,
    2086, 2391, 2150, 2340, 3129, 2277, 2964, 2997, 2747, 2862, 3405, 2677, 2749, 2755,
    2963, 3161, 3623, 2768, 3141, 3439, 3601, 3531, 3477, 3376, 4027, 3175, 3274, 3334,
    3964, 3649, 3502, 3688, 3657, 4422, 4197, 4441, 4736, 4521, 4485, 4644, 5036, 4876,
    4789, 4544, 4975, 5211, 4880, 4933, 5079, 5339, 5232, 5520, 5714, 5260, 6110, 5334,
    5988, 6235, 6365, 6266, 6345, 6118, 6497, 6278, 6638, 6590, 6271, 7246, 6584, 6594,
    7092, 7326, 7409, 7976, 7959, 8012, 8195, 8008, 8313, 7791, 8368, 8933, 8756, 8613,
    8705, 9098, 8769, 9544, 9050, 9186, 10012, 9685, 9966, 10048, 10244, 10740, 10318,
    10393, 10986, 10635, 10731, 11749, 11849, 12123, 12274, 11666, 11960, 12629, 12915,
    13051, 13387, 13309, 13732, 13162, 13644, 13808, 14101, 13992, 15191, 15018, 14917,
    15046, 15556, 15893, 16388, 16782, 16716, 17033, 16896, 17689
]

# Define the exponential function
def exp_func(x, a, b, c):
    return a * np.exp(b * x) + c

# Fit the exponential function to the data
params, _ = curve_fit(exp_func, month_numbers, production_values, p0=(1, 0.01, 1))
a, b, c = params
print(f'Exponential function parameters: a={a: .3f}, b={b: .3f}, c={c: .3f}')

# Display the mathematical model
print(f"Exponential approximation = {a:.3f} * e^({b:.3f} * x) + {c:.3f}")

# Implementation of the Newton-Raphson method to find time t
def find_capacity_reached_month(target_capacity, initial_guess=100):
    def exp_func_derivative(x, a, b, c):
        return a * b * np.exp(b * x)

    def func_to_solve(x):
        return exp_func(x, *params) - target_capacity

    def derivative_func_to_solve(x):
        return exp_func_derivative(x, *params)

    # Method Newton-Raphson
    x0 = initial_guess
    max_iter = 100
    tolerance = 1e-6
    for _ in range(max_iter):
        fx = func_to_solve(x0)
        if abs(fx) < tolerance:
            return x0
        f_prime_x = derivative_func_to_solve(x0)
        x0 = x0 - fx / f_prime_x

    return None

# Look for a time when the 25000 capacity will be reached
target_capacity = 25000
capacity_reached_month = find_capacity_reached_month(target_capacity)

if capacity_reached_month is not None:
    print(f"EGIER is expected to reach a capacity of 25,000 bags in month {capacity_reached_month:.3f}")

    # Predict when to build a new warehouse
    months_needed_for_new_warehouse = 13
    build_start_month = capacity_reached_month - months_needed_for_new_warehouse
    print(f"EGIER needs to start building a new warehouse around month  {build_start_month:.3f}")

    # Plot the original data and the fitted exponential function
    plt.figure(figsize=(10, 6))
    plt.scatter(month_numbers, production_values, color='blue', label='Data Production')
    plt.plot(month_numbers, exp_func(month_numbers, *params), color='red', label='Exponential Function')
    plt.axhline(y=target_capacity, color='green', linestyle='--', label='Capacity 25,000 Bags')
    plt.plot([capacity_reached_month, capacity_reached_month], [0, target_capacity], color='orange', linestyle='--', linewidth=2, label=f'Predicted Touched Capacity of 25,000 in month {capacity_reached_month:.3f}')
    plt.plot([build_start_month, build_start_month], [0, max(production_values)], color='purple', linestyle='--', linewidth=2, label=f'Start to Build New Warehouse in month {build_start_month:.3f}')
    plt.xlabel('Month')
    plt.ylabel('Production')
    plt.title('Capacity Reaches 25,000 and Plans to Build A New Warehouse (Newton-Raphson Method)')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()
else:
    print("The Newton-Raphson method does not converge. Try different initial values")